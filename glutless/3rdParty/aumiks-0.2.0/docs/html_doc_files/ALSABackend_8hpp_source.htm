<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>libaumiks: ALSABackend.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.4 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">libaumiks&#160;<span id="projectnumber">0.2.0</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ALSABackend_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ALSABackend.hpp</div>  </div>
</div>
<div class="contents">
<a href="ALSABackend_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2011 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">/*</span>
<a name="l00024"></a>00024 <span class="comment"> * aumiks 0.1</span>
<a name="l00025"></a>00025 <span class="comment"> *</span>
<a name="l00026"></a>00026 <span class="comment"> * File:   ALSA.hpp</span>
<a name="l00027"></a>00027 <span class="comment"> * Author: ivan</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * Created on March 9, 2009, 3:22 PM</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="comment">// Use the newer ALSA API</span>
<a name="l00035"></a><a class="code" href="ALSABackend_8hpp.htm#a705350c14c1f28bb8d6d57dafbf9ccff">00035</a> <span class="preprocessor">#define ALSA_PCM_NEW_HW_PARAMS_API</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#include &lt;alsa/asoundlib.h&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="WriteBasedBackend_8hpp.htm">WriteBasedBackend.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;../Exc.hpp&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">namespace</span>{
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">class </span>ALSABackend : <span class="keyword">public</span> WriteBasedBackend{
<a name="l00045"></a>00045         <span class="keyword">struct </span>Device{
<a name="l00046"></a>00046                 snd_pcm_t *handle;
<a name="l00047"></a>00047                 
<a name="l00048"></a>00048                 Device(){
<a name="l00049"></a>00049                         <span class="comment">//Open PCM device for playback.</span>
<a name="l00050"></a>00050                         <span class="keywordflow">if</span>(snd_pcm_open(&amp;this-&gt;handle, <span class="stringliteral">&quot;default&quot;</span> <span class="comment">/*&quot;hw:0,0&quot;*/</span>, SND_PCM_STREAM_PLAYBACK, 0) &lt; 0){
<a name="l00051"></a>00051 <span class="comment">//                              TRACE(&lt;&lt; &quot;ALSA: unable to open pcm device&quot; &lt;&lt; std::endl)</span>
<a name="l00052"></a>00052                                 <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;ALSA: unable to open pcm device&quot;</span>);
<a name="l00053"></a>00053                         }
<a name="l00054"></a>00054                 }
<a name="l00055"></a>00055                 
<a name="l00056"></a>00056                 ~Device(){
<a name="l00057"></a>00057                         snd_pcm_close(this-&gt;handle);
<a name="l00058"></a>00058                 }
<a name="l00059"></a>00059         } device;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <span class="keywordtype">unsigned</span> bytesPerFrame;
<a name="l00062"></a>00062         
<a name="l00063"></a>00063 <span class="keyword">public</span>:
<a name="l00064"></a>00064         ALSABackend(<span class="keywordtype">unsigned</span> bufferSizeFrames, <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">aumiks::E_Format</a> format) :
<a name="l00065"></a>00065                         WriteBasedBackend(bufferSizeFrames * <a class="code" href="namespaceaumiks.htm#a4d9bb89d8dc7384c0a9b21a229f6d31c" title="Returns frame size for given sound output format.">aumiks::BytesPerFrame</a>(format)),
<a name="l00066"></a>00066                         bytesPerFrame(<a class="code" href="namespaceaumiks.htm#a4d9bb89d8dc7384c0a9b21a229f6d31c" title="Returns frame size for given sound output format.">aumiks::BytesPerFrame</a>(format))
<a name="l00067"></a>00067         {
<a name="l00068"></a>00068 <span class="comment">//              TRACE(&lt;&lt; &quot;setting HW params&quot; &lt;&lt; std::endl)</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070                 this-&gt;SetHWParams(bufferSizeFrames, format);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">//              TRACE(&lt;&lt; &quot;setting SW params&quot; &lt;&lt; std::endl)</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074                 this-&gt;SetSwParams(bufferSizeFrames);<span class="comment">//must be called after this-&gt;SetHWParams()!!!</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076                 <span class="keywordflow">if</span>(snd_pcm_prepare(this-&gt;device.handle) &lt; 0){
<a name="l00077"></a>00077 <span class="comment">//                      TRACE(&lt;&lt; &quot;cannot prepare audio interface for use&quot; &lt;&lt; std::endl)</span>
<a name="l00078"></a>00078                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set parameters&quot;</span>);
<a name="l00079"></a>00079                 }
<a name="l00080"></a>00080                 
<a name="l00081"></a>00081                 this-&gt;Start();<span class="comment">//start thread</span>
<a name="l00082"></a>00082         }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         <span class="keyword">virtual</span> ~ALSABackend()<span class="keywordflow">throw</span>(){
<a name="l00085"></a>00085                 this-&gt;StopThread();
<a name="l00086"></a>00086         }
<a name="l00087"></a>00087         
<a name="l00088"></a>00088         <span class="keyword">inline</span> <span class="keyword">static</span> ting::Ptr&lt;ALSABackend&gt; New(<span class="keywordtype">unsigned</span> bufferSizeFrames, <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">aumiks::E_Format</a> format){
<a name="l00089"></a>00089                 <span class="keywordflow">return</span> ting::Ptr&lt;ALSABackend&gt;(
<a name="l00090"></a>00090                                 <span class="keyword">new</span> ALSABackend(bufferSizeFrames, format)
<a name="l00091"></a>00091                         );
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         <span class="keywordtype">int</span> RecoverALSAFromXrun(<span class="keywordtype">int</span> err){
<a name="l00095"></a>00095                 TRACE(&lt;&lt; <span class="stringliteral">&quot;stream recovery&quot;</span> &lt;&lt; std::endl)
<a name="l00096"></a>00096                 <span class="keywordflow">if</span>(err == -EPIPE){<span class="comment">// under-run</span>
<a name="l00097"></a>00097                         err = snd_pcm_prepare(this-&gt;device.handle);
<a name="l00098"></a>00098                         <span class="keywordflow">if</span> (err &lt; 0){
<a name="l00099"></a>00099                                 TRACE(
<a name="l00100"></a>00100                                                 &lt;&lt; <span class="stringliteral">&quot;Can&#39;t recovery from underrun, prepare failed, error code =&quot;</span>
<a name="l00101"></a>00101                                                 &lt;&lt; snd_strerror(err) &lt;&lt; std::endl
<a name="l00102"></a>00102                                         )
<a name="l00103"></a>00103                         }
<a name="l00104"></a>00104                         <span class="keywordflow">return</span> 0;
<a name="l00105"></a>00105                 }<span class="keywordflow">else</span> <span class="keywordflow">if</span>(err == -ESTRPIPE){
<a name="l00106"></a>00106                         <span class="keywordflow">while</span>((err = snd_pcm_resume(this-&gt;device.handle)) == -EAGAIN)
<a name="l00107"></a>00107                                 ting::Thread::Sleep(100);<span class="comment">// wait until the suspend flag is released</span>
<a name="l00108"></a>00108                         <span class="keywordflow">if</span>(err &lt; 0){
<a name="l00109"></a>00109                                 err = snd_pcm_prepare(this-&gt;device.handle);
<a name="l00110"></a>00110                                 <span class="keywordflow">if</span> (err &lt; 0){
<a name="l00111"></a>00111                                         TRACE(
<a name="l00112"></a>00112                                                         &lt;&lt; <span class="stringliteral">&quot;Can&#39;t recovery from suspend, prepare failed, error code =&quot;</span>
<a name="l00113"></a>00113                                                         &lt;&lt; snd_strerror(err) &lt;&lt; std::endl
<a name="l00114"></a>00114                                                 )
<a name="l00115"></a>00115                                 }
<a name="l00116"></a>00116                         }
<a name="l00117"></a>00117                         <span class="keywordflow">return</span> 0;
<a name="l00118"></a>00118                 }
<a name="l00119"></a>00119                 <span class="keywordflow">return</span> err;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="comment">//override</span>
<a name="l00123"></a>00123         <span class="keywordtype">void</span> Write(<span class="keyword">const</span> ting::Buffer&lt;ting::u8&gt;&amp; buf){
<a name="l00124"></a>00124                 ASSERT(buf.Size() % this-&gt;bytesPerFrame == 0)
<a name="l00125"></a>00125                 
<a name="l00126"></a>00126                 <span class="keywordtype">unsigned</span> bufferSizeFrames = buf.Size() / this-&gt;bytesPerFrame;
<a name="l00127"></a>00127                 
<a name="l00128"></a>00128                 <span class="keywordtype">unsigned</span> numFramesWritten = 0;
<a name="l00129"></a>00129                 <span class="keywordflow">while</span>(numFramesWritten &lt; bufferSizeFrames){
<a name="l00130"></a>00130                         <span class="comment">//write interleaved samples</span>
<a name="l00131"></a>00131                         <span class="keywordtype">int</span> ret = snd_pcm_writei(
<a name="l00132"></a>00132                                         this-&gt;device.handle,
<a name="l00133"></a>00133                                         reinterpret_cast&lt;const void*&gt;(&amp;buf[numFramesWritten * this-&gt;bytesPerFrame]),
<a name="l00134"></a>00134                                         bufferSizeFrames - numFramesWritten
<a name="l00135"></a>00135                                 );
<a name="l00136"></a>00136                         <span class="keywordflow">if</span>(ret &lt; 0){
<a name="l00137"></a>00137                                 <span class="keywordflow">if</span>(ret == -EAGAIN)
<a name="l00138"></a>00138                                         <span class="keywordflow">continue</span>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140                                 <span class="keywordtype">int</span> err = this-&gt;RecoverALSAFromXrun(ret);
<a name="l00141"></a>00141                                 <span class="keywordflow">if</span>(err &lt; 0){
<a name="l00142"></a>00142 <span class="comment">//                                      LOG(&lt;&lt; &quot;write to audio interface failed, err = &quot; &lt;&lt; snd_strerror(err) &lt;&lt; std::endl)</span>
<a name="l00143"></a>00143                                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;write to audio interface failed&quot;</span>);
<a name="l00144"></a>00144                                 }
<a name="l00145"></a>00145                         }
<a name="l00146"></a>00146                         numFramesWritten += ret;
<a name="l00147"></a>00147                 }
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <span class="keywordtype">void</span> SetHWParams(<span class="keywordtype">unsigned</span> bufferSizeFrames, <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">aumiks::E_Format</a> format){
<a name="l00151"></a>00151                 <span class="keyword">struct </span>HwParams{
<a name="l00152"></a>00152                         snd_pcm_hw_params_t* params;
<a name="l00153"></a>00153                         
<a name="l00154"></a>00154                         HwParams(){
<a name="l00155"></a>00155                                 <span class="keywordflow">if</span>(snd_pcm_hw_params_malloc(&amp;this-&gt;params) &lt; 0){
<a name="l00156"></a>00156                                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot allocate hardware parameter structure&quot;</span> &lt;&lt; std::endl)
<a name="l00157"></a>00157                                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot allocate hardware parameter structure&quot;</span>);
<a name="l00158"></a>00158                                 }
<a name="l00159"></a>00159                         }
<a name="l00160"></a>00160                         
<a name="l00161"></a>00161                         ~HwParams(){
<a name="l00162"></a>00162                                 snd_pcm_hw_params_free(this-&gt;params);
<a name="l00163"></a>00163                         }
<a name="l00164"></a>00164                 } hw;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166                 <span class="keywordflow">if</span>(snd_pcm_hw_params_any(this-&gt;device.handle, hw.params) &lt; 0){
<a name="l00167"></a>00167                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot initialize hardware parameter structure&quot;</span> &lt;&lt; std::endl)
<a name="l00168"></a>00168                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot initialize hardware parameter structure&quot;</span>);
<a name="l00169"></a>00169                 }
<a name="l00170"></a>00170 
<a name="l00171"></a>00171                 <span class="keywordflow">if</span>(snd_pcm_hw_params_set_access(this-&gt;device.handle, hw.params, SND_PCM_ACCESS_RW_INTERLEAVED) &lt; 0){
<a name="l00172"></a>00172                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set access type&quot;</span> &lt;&lt; std::endl)
<a name="l00173"></a>00173                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set access type&quot;</span>);
<a name="l00174"></a>00174                 }
<a name="l00175"></a>00175 
<a name="l00176"></a>00176                 <span class="keywordflow">if</span>(snd_pcm_hw_params_set_format(this-&gt;device.handle, hw.params, SND_PCM_FORMAT_S16_LE) &lt; 0){
<a name="l00177"></a>00177                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set sample format&quot;</span> &lt;&lt; std::endl)
<a name="l00178"></a>00178                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set sample format&quot;</span>);
<a name="l00179"></a>00179                 }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181                 {
<a name="l00182"></a>00182                         <span class="keywordtype">unsigned</span> val = <a class="code" href="namespaceaumiks.htm#ae0aac0c5e99d7ab38d758f1ffe0ef419" title="Returns sampling rate for given sound output format.">aumiks::SamplingRate</a>(format);
<a name="l00183"></a>00183                         <span class="keywordflow">if</span>(snd_pcm_hw_params_set_rate_near(this-&gt;device.handle, hw.params, &amp;val, 0) &lt; 0){
<a name="l00184"></a>00184                                 TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set sample rate&quot;</span> &lt;&lt; std::endl)
<a name="l00185"></a>00185                                 <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set sample rate&quot;</span>);
<a name="l00186"></a>00186                         }
<a name="l00187"></a>00187                 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189                 <span class="keywordflow">if</span>(snd_pcm_hw_params_set_channels(this-&gt;device.handle, hw.params, <a class="code" href="namespaceaumiks.htm#a38742c8c01d2953443544719efafc711" title="Returns number of samples per frame for given sound output format.">aumiks::SamplesPerFrame</a>(format)) &lt; 0){
<a name="l00190"></a>00190                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set channel count&quot;</span> &lt;&lt; std::endl)
<a name="l00191"></a>00191                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set channel count&quot;</span>);
<a name="l00192"></a>00192                 }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194                 <span class="comment">//Set period size</span>
<a name="l00195"></a>00195                 {
<a name="l00196"></a>00196                         snd_pcm_uframes_t frames = snd_pcm_uframes_t(bufferSizeFrames);
<a name="l00197"></a>00197                         <span class="keywordtype">int</span> dir = 0;
<a name="l00198"></a>00198                         <span class="keywordflow">if</span>(snd_pcm_hw_params_set_period_size_near(
<a name="l00199"></a>00199                                         this-&gt;device.handle,
<a name="l00200"></a>00200                                         hw.params,
<a name="l00201"></a>00201                                         &amp;frames,
<a name="l00202"></a>00202                                         &amp;dir
<a name="l00203"></a>00203                                 ) &lt; 0
<a name="l00204"></a>00204                         )
<a name="l00205"></a>00205                         {
<a name="l00206"></a>00206                                 TRACE(&lt;&lt; <span class="stringliteral">&quot;could not set period size&quot;</span> &lt;&lt; std::endl)
<a name="l00207"></a>00207                                 <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;could not set period size&quot;</span>);
<a name="l00208"></a>00208                         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210                         TRACE(&lt;&lt; <span class="stringliteral">&quot;buffer size in samples = &quot;</span> &lt;&lt; this-&gt;BufferSizeInSamples() &lt;&lt; std::endl)
<a name="l00211"></a>00211                 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213                 <span class="comment">// Set number of periods. Periods used to be called fragments.</span>
<a name="l00214"></a>00214                 {
<a name="l00215"></a>00215                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numPeriods = 2;
<a name="l00216"></a>00216                         <span class="keywordtype">int</span> err = snd_pcm_hw_params_set_periods_near(this-&gt;device.handle, hw.params, &amp;numPeriods, NULL);
<a name="l00217"></a>00217                         <span class="keywordflow">if</span>(err &lt; 0){
<a name="l00218"></a>00218                                 TRACE(&lt;&lt; <span class="stringliteral">&quot;could not set number of periods, err = &quot;</span> &lt;&lt; err &lt;&lt; std::endl)
<a name="l00219"></a>00219                                 <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;could not set number of periods&quot;</span>);
<a name="l00220"></a>00220                         }
<a name="l00221"></a>00221                         TRACE(&lt;&lt; <span class="stringliteral">&quot;numPeriods = &quot;</span> &lt;&lt; numPeriods &lt;&lt; std::endl)
<a name="l00222"></a>00222                 }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 
<a name="l00225"></a>00225                 <span class="comment">//set hw params</span>
<a name="l00226"></a>00226                 <span class="keywordflow">if</span>(snd_pcm_hw_params(this-&gt;device.handle, hw.params) &lt; 0){
<a name="l00227"></a>00227                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set parameters&quot;</span> &lt;&lt; std::endl)
<a name="l00228"></a>00228                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set parameters&quot;</span>);
<a name="l00229"></a>00229                 }
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232         
<a name="l00233"></a>00233 
<a name="l00234"></a>00234         <span class="keywordtype">void</span> SetSwParams(<span class="keywordtype">unsigned</span> bufferSizeFrames){
<a name="l00235"></a>00235                 <span class="keyword">struct </span>SwParams{
<a name="l00236"></a>00236                         snd_pcm_sw_params_t *params;
<a name="l00237"></a>00237                         SwParams(){
<a name="l00238"></a>00238                                 <span class="keywordflow">if</span>(snd_pcm_sw_params_malloc(&amp;this-&gt;params) &lt; 0){
<a name="l00239"></a>00239                                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot allocate software parameters structure&quot;</span> &lt;&lt; std::endl)
<a name="l00240"></a>00240                                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot allocate software parameters structure&quot;</span>);
<a name="l00241"></a>00241                                 }
<a name="l00242"></a>00242                         }
<a name="l00243"></a>00243                         ~SwParams(){
<a name="l00244"></a>00244                                 snd_pcm_sw_params_free(this-&gt;params);
<a name="l00245"></a>00245                         }
<a name="l00246"></a>00246                 } sw;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248                 <span class="keywordflow">if</span>(snd_pcm_sw_params_current(this-&gt;device.handle, sw.params) &lt; 0){
<a name="l00249"></a>00249                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot initialize software parameters structure&quot;</span> &lt;&lt; std::endl)
<a name="l00250"></a>00250                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot initialize software parameters structure&quot;</span>);
<a name="l00251"></a>00251                 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253                 <span class="comment">//tell ALSA to wake us up whenever &#39;buffer size&#39; frames of playback data can be delivered</span>
<a name="l00254"></a>00254                 <span class="keywordflow">if</span>(snd_pcm_sw_params_set_avail_min(this-&gt;device.handle, sw.params, bufferSizeFrames) &lt; 0){
<a name="l00255"></a>00255                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set minimum available count&quot;</span> &lt;&lt; std::endl)
<a name="l00256"></a>00256                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set minimum available count&quot;</span>);
<a name="l00257"></a>00257                 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259                 <span class="comment">//tell ALSA to start playing on first data write</span>
<a name="l00260"></a>00260                 <span class="keywordflow">if</span>(snd_pcm_sw_params_set_start_threshold(this-&gt;device.handle, sw.params, 0) &lt; 0){
<a name="l00261"></a>00261                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set start mode&quot;</span> &lt;&lt; std::endl)
<a name="l00262"></a>00262                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set start mode&quot;</span>);
<a name="l00263"></a>00263                 }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265                 <span class="keywordflow">if</span>(snd_pcm_sw_params(this-&gt;device.handle, sw.params) &lt; 0){
<a name="l00266"></a>00266                         TRACE(&lt;&lt; <span class="stringliteral">&quot;cannot set software parameters&quot;</span> &lt;&lt; std::endl)
<a name="l00267"></a>00267                         <span class="keywordflow">throw</span> <a class="code" href="classaumiks_1_1Exc.htm">aumiks::Exc</a>(<span class="stringliteral">&quot;cannot set software parameters&quot;</span>);
<a name="l00268"></a>00268                 }
<a name="l00269"></a>00269         }
<a name="l00270"></a>00270         
<a name="l00271"></a>00271 };
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 }<span class="comment">//~namespace</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ALSABackend_8hpp.htm">ALSABackend.hpp</a>      </li>
      <li class="footer">Generated on Tue Mar 13 2012 14:32:08 for libaumiks by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.4 </li>
    </ul>
  </div>

</body>
</html>
