<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>libaumiks: aumiks.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.4 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">libaumiks&#160;<span id="projectnumber">0.2.0</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('aumiks_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">aumiks.hpp</div>  </div>
</div>
<div class="contents">
<a href="aumiks_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://aumiks.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00031"></a>00031 <span class="preprocessor">#pragma once</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;ting/types.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;ting/Singleton.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;ting/Exc.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;ting/types.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;ting/debug.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;ting/Buffer.hpp&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;ting/Array.hpp&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;ting/Ref.hpp&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;ting/Thread.hpp&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;ting/Ptr.hpp&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm">Exc.hpp</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">//#define M_ENABLE_AUMIKS_TRACE</span>
<a name="l00051"></a>00051 <span class="preprocessor">#ifdef M_ENABLE_AUMIKS_TRACE</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#define M_AUMIKS_TRACE(x) TRACE(&lt;&lt; &quot;[aumiks] &quot;) TRACE(x)</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00054"></a><a class="code" href="aumiks_8hpp.htm#afa669d4ad4c391a448805e3c1b1a4464">00054</a> <span class="preprocessor"></span><span class="preprocessor">#define M_AUMIKS_TRACE(x)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="namespaceaumiks.htm">00059</a> <span class="keyword">namespace </span>aumiks{
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">//forward declarations</span>
<a name="l00064"></a>00064 <span class="keyword">class </span><a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">Lib</a>;
<a name="l00065"></a>00065 <span class="keyword">class </span><a class="code" href="classaumiks_1_1Channel.htm" title="Base class of a channel for playing the sound.">Channel</a>;
<a name="l00066"></a>00066 <span class="keyword">class </span><a class="code" href="classaumiks_1_1AudioBackend.htm">AudioBackend</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00076"></a><a class="code" href="classaumiks_1_1Effect.htm">00076</a> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Effect.htm" title="Base class for effect classes which can be applied to a playing sound.">Effect</a> : <span class="keyword">public</span> ting::RefCounted{
<a name="l00077"></a><a class="code" href="classaumiks_1_1Effect.htm#a7d6179bcf1823319e9a25c2725cd2bde">00077</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Channel.htm" title="Base class of a channel for playing the sound.">aumiks::Channel</a>;
<a name="l00078"></a><a class="code" href="classaumiks_1_1Effect.htm#a8163bf2e065ad679943b8afefc465f69">00078</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">aumiks::Lib</a>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="keyword">typedef</span> std::list&lt;ting::Ref&lt;aumiks::Effect&gt; &gt; T_EffectsList;
<a name="l00081"></a>00081         <span class="keyword">typedef</span> T_EffectsList::iterator T_EffectsIter;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">public</span>:
<a name="l00084"></a>00084 
<a name="l00090"></a><a class="code" href="classaumiks_1_1Effect.htm#accf6c1a39051c065bce12e5af91bf93f">00090</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Effect.htm#accf6c1a39051c065bce12e5af91bf93f" title="Called every time when the Channel is about to start playing.">Init_ts</a>(){}
<a name="l00091"></a>00091 
<a name="l00095"></a><a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54">00095</a>         <span class="keyword">enum</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a>{
<a name="l00104"></a><a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f">00104</a>                 <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>,
<a name="l00105"></a>00105 
<a name="l00115"></a><a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54ad79925d02d8d3ec2aa384e8808babbd8">00115</a>                 <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54ad79925d02d8d3ec2aa384e8808babbd8" title="Effect is still producing output.">CONTINUE</a>,
<a name="l00116"></a>00116 
<a name="l00124"></a><a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54aa515f8e5cf494a6689d7cbc75e66aca4">00124</a>                 <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54aa515f8e5cf494a6689d7cbc75e66aca4" title="Effect has request to stop the sound.">STOP_SOUND</a>
<a name="l00125"></a>00125         };
<a name="l00126"></a>00126 
<a name="l00136"></a><a class="code" href="classaumiks_1_1Effect.htm#ab0d32d05baba5c32190bf6e5fd86a702">00136</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#ab0d32d05baba5c32190bf6e5fd86a702" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf11025Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00137"></a>00137                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139 
<a name="l00144"></a><a class="code" href="classaumiks_1_1Effect.htm#a525512667b1c63ec395aaa5a6a4a4a9e">00144</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#a525512667b1c63ec395aaa5a6a4a4a9e" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf11025Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00145"></a>00145                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147 
<a name="l00152"></a><a class="code" href="classaumiks_1_1Effect.htm#a03e97c471adf60267e54ea0b1c28c6df">00152</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#a03e97c471adf60267e54ea0b1c28c6df" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf22050Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00153"></a>00153                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00154"></a>00154         }
<a name="l00155"></a>00155 
<a name="l00160"></a><a class="code" href="classaumiks_1_1Effect.htm#aa50473f41f5babc0136f78f8ba6984d2">00160</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#aa50473f41f5babc0136f78f8ba6984d2" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf22050Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00161"></a>00161                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00162"></a>00162         }
<a name="l00163"></a>00163 
<a name="l00168"></a><a class="code" href="classaumiks_1_1Effect.htm#a309e257fe80fc98dbb7cbf2a20c49e66">00168</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#a309e257fe80fc98dbb7cbf2a20c49e66" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf44100Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00169"></a>00169                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171 
<a name="l00176"></a><a class="code" href="classaumiks_1_1Effect.htm#a90135d54e64e7ac144bacde2414e5cf1">00176</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> <a class="code" href="classaumiks_1_1Effect.htm#a90135d54e64e7ac144bacde2414e5cf1" title="Called when effect is to be applied to a portion of a playing sound.">ApplyToBuf44100Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00177"></a>00177                 <span class="keywordflow">return</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">NORMAL</a>;
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="keyword">private</span>:
<a name="l00181"></a>00181         <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">E_Result</a> ApplyToBufImpl(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped);
<a name="l00182"></a>00182 };
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00190"></a><a class="code" href="classaumiks_1_1Channel.htm">00190</a> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Channel.htm" title="Base class of a channel for playing the sound.">Channel</a> : <span class="keyword">public</span> ting::RefCounted{
<a name="l00191"></a><a class="code" href="classaumiks_1_1Channel.htm#a8163bf2e065ad679943b8afefc465f69">00191</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">aumiks::Lib</a>;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         ting::Inited&lt;volatile bool, false&gt; isPlaying;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195         <span class="keywordtype">bool</span> soundStopped;<span class="comment">//used to indicate that sound has finished playing, but effects are still playing.</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197         ting::Inited&lt;volatile bool, false&gt; stopFlag;<span class="comment">//indicates that playing should stop immediately</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="keyword">private</span>:
<a name="l00200"></a>00200         Effect::T_EffectsList effects;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202         <span class="keyword">inline</span> <span class="keywordtype">void</span> InitEffects(){
<a name="l00203"></a>00203                 <span class="keywordflow">for</span>(Effect::T_EffectsIter i = this-&gt;effects.begin(); i != this-&gt;effects.end(); ++i){
<a name="l00204"></a>00204                         (*i)-&gt;Init_ts();
<a name="l00205"></a>00205                 }
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="keyword">inline</span> <span class="keywordtype">void</span> RemoveEffect(<span class="keyword">const</span> ting::Ref&lt;Effect&gt;&amp; e){
<a name="l00209"></a>00209                 <span class="keywordflow">for</span>(Effect::T_EffectsIter i = this-&gt;effects.begin(); i != this-&gt;effects.end(); ++i){
<a name="l00210"></a>00210                         <span class="keywordflow">if</span>((*i) == e){
<a name="l00211"></a>00211                                 this-&gt;effects.erase(i);
<a name="l00212"></a>00212                                 <span class="keywordflow">break</span>;
<a name="l00213"></a>00213                         }
<a name="l00214"></a>00214                 }
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> ApplyEffectsToSmpBuf(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00218"></a>00218                 <span class="keywordtype">bool</span> ret = this-&gt;soundStopped;
<a name="l00219"></a>00219                 <span class="keywordtype">bool</span> stopRequested = <span class="keyword">false</span>;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221                 <span class="keywordflow">for</span>(Effect::T_EffectsIter i = this-&gt;effects.begin(); i != this-&gt;effects.end(); ++i){
<a name="l00222"></a>00222                         <span class="keywordflow">switch</span>((*i)-&gt;ApplyToBufImpl&lt;freq, chans&gt;(buf, this-&gt;soundStopped)){
<a name="l00223"></a>00223                                 <span class="keywordflow">case</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54a7b0863466de57ab49a226291d9ad981f" title="Normal result after applying the effect.">Effect::NORMAL</a>:
<a name="l00224"></a>00224                                         <span class="keywordflow">break</span>;
<a name="l00225"></a>00225                                 <span class="keywordflow">case</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54ad79925d02d8d3ec2aa384e8808babbd8" title="Effect is still producing output.">Effect::CONTINUE</a>:
<a name="l00226"></a>00226                                         ret = <span class="keyword">false</span>; <span class="comment">//at least one of the effects has requested to continue the channel playing</span>
<a name="l00227"></a>00227                                         <span class="keywordflow">break</span>;
<a name="l00228"></a>00228                                 <span class="keywordflow">case</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54aa515f8e5cf494a6689d7cbc75e66aca4" title="Effect has request to stop the sound.">Effect::STOP_SOUND</a>:
<a name="l00229"></a>00229                                         <span class="comment">//Set the stop requested flag.</span>
<a name="l00230"></a>00230                                         <span class="comment">//It is still necessary to apply remaining effects, since current filled sample buffer</span>
<a name="l00231"></a>00231                                         <span class="comment">//will still be played, no matter that the channel playing will be stopped.</span>
<a name="l00232"></a>00232                                         <span class="comment">//This is why we use flag instead of immediately returning true here, because the for-loop</span>
<a name="l00233"></a>00233                                         <span class="comment">//needs to be finished.</span>
<a name="l00234"></a>00234                                         stopRequested = <span class="keyword">true</span>;
<a name="l00235"></a>00235                                         <span class="keywordflow">break</span>;
<a name="l00236"></a>00236                                 <span class="keywordflow">default</span>:
<a name="l00237"></a>00237                                         ASSERT(<span class="keyword">false</span>)
<a name="l00238"></a>00238                                         break;
<a name="l00239"></a>00239                         }
<a name="l00240"></a>00240                 }
<a name="l00241"></a>00241                 return ret || stopRequested;
<a name="l00242"></a>00242         }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 protected:
<a name="l00246"></a><a class="code" href="classaumiks_1_1Channel.htm#aa90acbfa83985f4825e7091f7de59343">00246</a>         <a class="code" href="classaumiks_1_1Channel.htm" title="Base class of a channel for playing the sound.">Channel</a>(){}
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="keyword">public</span>:
<a name="l00249"></a>00249 
<a name="l00250"></a><a class="code" href="classaumiks_1_1Channel.htm#a47c57fe4b24bdd7b92f6114e3d3b9724">00250</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1Channel.htm#a47c57fe4b24bdd7b92f6114e3d3b9724">~Channel</a>()throw(){}
<a name="l00251"></a>00251         
<a name="l00257"></a><a class="code" href="classaumiks_1_1Channel.htm#a1175b42329f0e79ae68516d73486ac34">00257</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#a1175b42329f0e79ae68516d73486ac34" title="Check if sound is currently playing.">IsPlaying</a>()<span class="keyword">const</span>{
<a name="l00258"></a>00258                 <span class="keywordflow">return</span> this-&gt;isPlaying;
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260 
<a name="l00264"></a>00264         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#ab051f183bd26e1a07bc45368ae7ecdb4" title="Start playing of this channel.">Play</a>();
<a name="l00265"></a>00265 
<a name="l00269"></a><a class="code" href="classaumiks_1_1Channel.htm#aafdb9aba1466521bcf97f34fd07105f6">00269</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#aafdb9aba1466521bcf97f34fd07105f6" title="Stop playing of this channel.">Stop</a>(){
<a name="l00270"></a>00270                 this-&gt;stopFlag = <span class="keyword">true</span>;
<a name="l00271"></a>00271         }
<a name="l00272"></a>00272 
<a name="l00280"></a>00280         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#ae202cf9f2e1e2157db50612545b91d7a" title="Add effect to the channel.">AddEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; effect);
<a name="l00281"></a>00281 
<a name="l00287"></a>00287         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#a1e5e0ee40d5db6c2d4b07fe66905bffa" title="Remove effect from the channel.">RemoveEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; effect);
<a name="l00288"></a>00288 
<a name="l00292"></a>00292         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#adba4dbeabf95d10847de654930b2dd52" title="Remove all effects from channel.">RemoveAllEffects_ts</a>();
<a name="l00293"></a>00293 <span class="keyword">protected</span>:
<a name="l00297"></a><a class="code" href="classaumiks_1_1Channel.htm#ab121cbfeaf3d009a17aab063c1f30483">00297</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#ab121cbfeaf3d009a17aab063c1f30483" title="Called when channel has been added to pool of playing channels.">OnStart</a>(){}
<a name="l00298"></a>00298 
<a name="l00302"></a><a class="code" href="classaumiks_1_1Channel.htm#af093e6f33c291b0f07f815d9d737756d">00302</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#af093e6f33c291b0f07f815d9d737756d" title="Called when channel has been removed from pool of playing channels.">OnStop</a>(){}
<a name="l00303"></a>00303 
<a name="l00316"></a><a class="code" href="classaumiks_1_1Channel.htm#a93e55960fdc0d7c71c94d9a362e6a6de">00316</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#a93e55960fdc0d7c71c94d9a362e6a6de" title="This function is called when more data to play is needed.">FillSmpBuf11025Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00317"></a>00317                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00318"></a>00318         }
<a name="l00319"></a>00319 
<a name="l00324"></a><a class="code" href="classaumiks_1_1Channel.htm#a18fe3b503fe1195c4713e7bc91efc1b5">00324</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#a18fe3b503fe1195c4713e7bc91efc1b5" title="This function is called when more data to play is needed.">FillSmpBuf11025Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00325"></a>00325                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00326"></a>00326         }
<a name="l00327"></a>00327 
<a name="l00332"></a><a class="code" href="classaumiks_1_1Channel.htm#a6dd5f59cfa3370d55a5ce7d652b0371c">00332</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#a6dd5f59cfa3370d55a5ce7d652b0371c" title="This function is called when more data to play is needed.">FillSmpBuf22050Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00333"></a>00333                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00334"></a>00334         }
<a name="l00335"></a>00335 
<a name="l00340"></a><a class="code" href="classaumiks_1_1Channel.htm#a348c46fc58764cd3d86781104590f07b">00340</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#a348c46fc58764cd3d86781104590f07b" title="This function is called when more data to play is needed.">FillSmpBuf22050Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00341"></a>00341                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343 
<a name="l00348"></a><a class="code" href="classaumiks_1_1Channel.htm#aa96db4ef8d023842963698128f67bfbd">00348</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#aa96db4ef8d023842963698128f67bfbd" title="This function is called when more data to play is needed.">FillSmpBuf44100Mono16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00349"></a>00349                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351 
<a name="l00356"></a><a class="code" href="classaumiks_1_1Channel.htm#afc235db1b3ddd9f3ff7249960290f10e">00356</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Channel.htm#afc235db1b3ddd9f3ff7249960290f10e" title="This function is called when more data to play is needed.">FillSmpBuf44100Stereo16</a>(ting::Buffer&lt;ting::s32&gt;&amp; buf){
<a name="l00357"></a>00357                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00358"></a>00358         }
<a name="l00359"></a>00359 };
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00368"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab">00368</a> <span class="keyword">enum</span> <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">E_Format</a>{
<a name="l00372"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba7e64c4e811aae0220aa45b106d77bfee">00372</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba7e64c4e811aae0220aa45b106d77bfee" title="Mono 11025 Hz.">MONO_16_11025</a>,
<a name="l00373"></a>00373 
<a name="l00377"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2abaf9fe0470be717eddfece3561b18a0624">00377</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2abaf9fe0470be717eddfece3561b18a0624" title="Mono 22050 Hz.">MONO_16_22050</a>,
<a name="l00378"></a>00378 
<a name="l00382"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2abae18b8196242ba63a587faafb554482e8">00382</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2abae18b8196242ba63a587faafb554482e8" title="Mono 44100 Hz.">MONO_16_44100</a>,
<a name="l00383"></a>00383 
<a name="l00387"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba409c9d91a990458006697ede899674a1">00387</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba409c9d91a990458006697ede899674a1" title="Stereo 11025 Hz.">STEREO_16_11025</a>,
<a name="l00388"></a>00388 
<a name="l00392"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba03d96c65ec4afa10aea50e791ddff349">00392</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba03d96c65ec4afa10aea50e791ddff349" title="Stereo 22050 Hz.">STEREO_16_22050</a>,
<a name="l00393"></a>00393 
<a name="l00397"></a><a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba4c8b1a252ede5e925308aadee6766ecd">00397</a>         <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba4c8b1a252ede5e925308aadee6766ecd" title="Stereo 44100 Hz.">STEREO_16_44100</a>
<a name="l00398"></a>00398 };
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 
<a name="l00410"></a>00410 <span class="keywordtype">unsigned</span> <a class="code" href="namespaceaumiks.htm#a4d9bb89d8dc7384c0a9b21a229f6d31c" title="Returns frame size for given sound output format.">BytesPerFrame</a>(<a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">E_Format</a> format);
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 
<a name="l00420"></a>00420 <span class="keywordtype">unsigned</span> <a class="code" href="namespaceaumiks.htm#a38742c8c01d2953443544719efafc711" title="Returns number of samples per frame for given sound output format.">SamplesPerFrame</a>(<a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">E_Format</a> format);
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 
<a name="l00428"></a>00428 <span class="keywordtype">unsigned</span> <a class="code" href="namespaceaumiks.htm#ae0aac0c5e99d7ab38d758f1ffe0ef419" title="Returns sampling rate for given sound output format.">SamplingRate</a>(<a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">E_Format</a> format);
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00439"></a><a class="code" href="classaumiks_1_1Lib.htm">00439</a> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">Lib</a> : <span class="keyword">public</span> ting::IntrusiveSingleton&lt;Lib&gt;{
<a name="l00440"></a><a class="code" href="classaumiks_1_1Lib.htm#a09b60b2158cd2dfeeb0c8540b97a9d2e">00440</a>         <span class="keyword">friend</span> <span class="keyword">class </span>ting::IntrusiveSingleton&lt;<a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">Lib</a>&gt;;
<a name="l00441"></a>00441         <span class="keyword">static</span> ting::IntrusiveSingleton&lt;Lib&gt;::T_Instance instance;
<a name="l00442"></a>00442         
<a name="l00443"></a><a class="code" href="classaumiks_1_1Lib.htm#a7d6179bcf1823319e9a25c2725cd2bde">00443</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Channel.htm" title="Base class of a channel for playing the sound.">aumiks::Channel</a>;
<a name="l00444"></a><a class="code" href="classaumiks_1_1Lib.htm#abf7580942ee1c089b2a45d4c9cd323ff">00444</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1AudioBackend.htm">aumiks::AudioBackend</a>;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446         <span class="keywordtype">void</span> AddEffectToChannel_ts(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch, <span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; eff);
<a name="l00447"></a>00447 
<a name="l00448"></a>00448         <span class="keywordtype">void</span> RemoveEffectFromChannel_ts(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch, <span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; eff);
<a name="l00449"></a>00449 
<a name="l00450"></a>00450         <span class="keywordtype">void</span> RemoveAllEffectsFromChannel_ts(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch);
<a name="l00451"></a>00451 
<a name="l00452"></a>00452         <span class="keywordtype">void</span> PlayChannel_ts(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch);
<a name="l00453"></a>00453 
<a name="l00454"></a>00454         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> RemoveEffectFromChannelSync(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch, <span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; eff){
<a name="l00455"></a>00455                 ch-&gt;RemoveEffect(eff);
<a name="l00456"></a>00456         }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> AddEffectToChannelSync(<span class="keyword">const</span> ting::Ref&lt;Channel&gt;&amp; ch, <span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; eff){
<a name="l00459"></a>00459                 ch-&gt;effects.push_back(eff);
<a name="l00460"></a>00460         }
<a name="l00461"></a>00461 <span class="keyword">public</span>:
<a name="l00470"></a>00470         Lib(ting::u16 bufferSizeMillis = 100, <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">aumiks::E_Format</a> format = <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2aba03d96c65ec4afa10aea50e791ddff349" title="Stereo 22050 Hz.">STEREO_16_22050</a>);
<a name="l00471"></a>00471 
<a name="l00478"></a><a class="code" href="classaumiks_1_1Lib.htm#ad102135de4c8828153b14c60c646ce59">00478</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#ad102135de4c8828153b14c60c646ce59" title="Mute sound output.">SetMuted</a>(<span class="keywordtype">bool</span> muted){
<a name="l00479"></a>00479                 this-&gt;mixerBuffer-&gt;isMuted = muted;
<a name="l00480"></a>00480         }
<a name="l00481"></a>00481 
<a name="l00488"></a><a class="code" href="classaumiks_1_1Lib.htm#af0f18324ba93f22891136a388eb78dc5">00488</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#af0f18324ba93f22891136a388eb78dc5" title="Unmute the sound.">SetUnmuted</a>(<span class="keywordtype">bool</span> unmuted){
<a name="l00489"></a>00489                 this-&gt;SetMuted(!unmuted);
<a name="l00490"></a>00490         }
<a name="l00491"></a>00491 
<a name="l00496"></a><a class="code" href="classaumiks_1_1Lib.htm#a1146f1485b863c073592cdb89bb2b2ba">00496</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#a1146f1485b863c073592cdb89bb2b2ba" title="Mute the sound.">Mute</a>(){
<a name="l00497"></a>00497                 this-&gt;SetMuted(<span class="keyword">true</span>);
<a name="l00498"></a>00498         }
<a name="l00499"></a>00499 
<a name="l00504"></a><a class="code" href="classaumiks_1_1Lib.htm#a27c23b902a9353b1f9b86ecc74822cba">00504</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#a27c23b902a9353b1f9b86ecc74822cba" title="Un-mute the sound.">Unmute</a>(){
<a name="l00505"></a>00505                 this-&gt;SetMuted(<span class="keyword">false</span>);
<a name="l00506"></a>00506         }
<a name="l00507"></a>00507 
<a name="l00513"></a><a class="code" href="classaumiks_1_1Lib.htm#a1d779c278e24a190f4d5f8b2eb03fc44">00513</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classaumiks_1_1Lib.htm#a1d779c278e24a190f4d5f8b2eb03fc44" title="Check if sound output is muted or not.">IsMuted</a>()<span class="keyword">const</span>{
<a name="l00514"></a>00514                 <span class="keywordflow">return</span> this-&gt;mixerBuffer-&gt;isMuted;
<a name="l00515"></a>00515         }
<a name="l00516"></a>00516 
<a name="l00525"></a>00525         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1AudioBackend.htm#a36767dc0cf3f095fa55955cb189fc97b">SetPaused</a>(<span class="keywordtype">bool</span> pause);      
<a name="l00532"></a><a class="code" href="classaumiks_1_1Lib.htm#af3d6fc09992cd1426769b94ee4972fb5">00532</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#af3d6fc09992cd1426769b94ee4972fb5" title="Pause audio engine.">Pause</a>(){
<a name="l00533"></a>00533                 this-&gt;<a class="code" href="classaumiks_1_1AudioBackend.htm#a36767dc0cf3f095fa55955cb189fc97b">SetPaused</a>(<span class="keyword">true</span>);
<a name="l00534"></a>00534         }
<a name="l00535"></a>00535         
<a name="l00542"></a><a class="code" href="classaumiks_1_1Lib.htm#ae5724ae64cdf42478243cd2808780104">00542</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#ae5724ae64cdf42478243cd2808780104" title="Resume audio engine.">Resume</a>(){
<a name="l00543"></a>00543                 this-&gt;<a class="code" href="classaumiks_1_1AudioBackend.htm#a36767dc0cf3f095fa55955cb189fc97b">SetPaused</a>(<span class="keyword">false</span>);
<a name="l00544"></a>00544         }
<a name="l00545"></a>00545         
<a name="l00546"></a>00546 <span class="keyword">private</span>:
<a name="l00547"></a>00547         <span class="comment">//Base class for mixer buffers of different formats</span>
<a name="l00548"></a>00548         <span class="keyword">class </span>MixerBuffer{
<a name="l00549"></a>00549                 <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Lib.htm" title="aumiks library singleton class.">aumiks::Lib</a>;
<a name="l00550"></a>00550         <span class="keyword">protected</span>:
<a name="l00551"></a>00551                 MixerBuffer(<span class="keywordtype">size_t</span> mixBufSizeInSamples) :
<a name="l00552"></a>00552                                 mixBuf(mixBufSizeInSamples),
<a name="l00553"></a>00553                                 smpBuf(mixBufSizeInSamples)
<a name="l00554"></a>00554                 {}
<a name="l00555"></a>00555 
<a name="l00556"></a>00556                 <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> FillSmpBufImpl(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch);
<a name="l00557"></a>00557 
<a name="l00558"></a>00558                 ting::Array&lt;ting::s32&gt; mixBuf;
<a name="l00559"></a>00559                 ting::Array&lt;ting::s32&gt; smpBuf;
<a name="l00560"></a>00560 
<a name="l00561"></a>00561                 ting::Inited&lt;volatile bool, false&gt; isMuted;
<a name="l00562"></a>00562         <span class="keyword">public</span>:
<a name="l00563"></a>00563                 <span class="keyword">virtual</span> ~MixerBuffer(){}
<a name="l00564"></a>00564 
<a name="l00565"></a>00565         <span class="keyword">private</span>:
<a name="l00566"></a>00566                 <span class="keyword">inline</span> <span class="keywordtype">void</span> CleanMixBuf(){
<a name="l00567"></a>00567                         memset(this-&gt;mixBuf.Begin(), 0, this-&gt;mixBuf.SizeInBytes());
<a name="l00568"></a>00568                 }
<a name="l00569"></a>00569 
<a name="l00570"></a>00570                 <span class="comment">//return true if channel has finished playing and should be removed from playing channels pool</span>
<a name="l00571"></a>00571                 <span class="keywordtype">bool</span> MixToMixBuf(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch);
<a name="l00572"></a>00572 
<a name="l00573"></a>00573                 <span class="keywordtype">void</span> CopyToPlayBuf(ting::Buffer&lt;ting::u8&gt;&amp; playBuf);
<a name="l00574"></a>00574 
<a name="l00575"></a>00575                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> FillSmpBuf(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch) = 0;
<a name="l00576"></a>00576 
<a name="l00577"></a>00577                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ApplyEffectsToSmpBuf(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch) = 0;
<a name="l00578"></a>00578 
<a name="l00579"></a>00579                 <span class="keyword">virtual</span> <span class="keywordtype">void</span> ApplyEffectsToMixBuf() = 0;
<a name="l00580"></a>00580 
<a name="l00581"></a>00581                 <span class="keywordtype">void</span> MixSmpBufToMixBuf();
<a name="l00582"></a>00582 
<a name="l00583"></a>00583                 <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> ApplyEffectsToSmpBufImpl(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00584"></a>00584                         <span class="keywordflow">return</span> ch-&gt;ApplyEffectsToSmpBuf&lt;freq, chans&gt;(this-&gt;smpBuf);
<a name="l00585"></a>00585                 }
<a name="l00586"></a>00586         };
<a name="l00587"></a>00587 
<a name="l00588"></a>00588         <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">class </span>MixerBufferImpl : <span class="keyword">public</span> Lib::MixerBuffer{
<a name="l00589"></a>00589                 MixerBufferImpl(<span class="keywordtype">unsigned</span> bufferSizeInSamples) :
<a name="l00590"></a>00590                                 MixerBuffer(bufferSizeInSamples)
<a name="l00591"></a>00591                 {}
<a name="l00592"></a>00592 
<a name="l00593"></a>00593                 <span class="comment">//override</span>
<a name="l00594"></a>00594                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> FillSmpBuf(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00595"></a>00595                         <span class="keywordflow">return</span> this-&gt;FillSmpBufImpl&lt;freq, chans&gt;(ch);
<a name="l00596"></a>00596                 }
<a name="l00597"></a>00597 
<a name="l00598"></a>00598                 <span class="comment">//override</span>
<a name="l00599"></a>00599                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ApplyEffectsToSmpBuf(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00600"></a>00600                         <span class="keywordflow">return</span> this-&gt;ApplyEffectsToSmpBufImpl&lt;freq, chans&gt;(ch);
<a name="l00601"></a>00601                 }
<a name="l00602"></a>00602 
<a name="l00603"></a>00603                 <span class="comment">//override</span>
<a name="l00604"></a>00604                 <span class="keyword">virtual</span> <span class="keywordtype">void</span> ApplyEffectsToMixBuf(){
<a name="l00605"></a>00605                         aumiks::Lib::Inst().ApplyEffectsToMixBuf&lt;freq, chans&gt;(this-&gt;mixBuf);
<a name="l00606"></a>00606                 }
<a name="l00607"></a>00607         <span class="keyword">public</span>:
<a name="l00608"></a>00608                 <span class="keyword">inline</span> <span class="keyword">static</span> ting::Ptr&lt;MixerBufferImpl&gt; New(<span class="keywordtype">unsigned</span> bufferSizeInSamples){
<a name="l00609"></a>00609                         <span class="keywordflow">return</span> ting::Ptr&lt;MixerBufferImpl&gt;(
<a name="l00610"></a>00610                                         <span class="keyword">new</span> MixerBufferImpl(bufferSizeInSamples)
<a name="l00611"></a>00611                                 );
<a name="l00612"></a>00612                 }
<a name="l00613"></a>00613         };
<a name="l00614"></a>00614 
<a name="l00615"></a>00615 <span class="keyword">private</span>:
<a name="l00616"></a>00616         <span class="comment">//this function is not thread-safe, but it is supposed to be called from special audio thread</span>
<a name="l00617"></a>00617         <span class="keywordtype">void</span> FillPlayBuf(ting::Buffer&lt;ting::u8&gt;&amp; playBuf);
<a name="l00618"></a>00618 
<a name="l00619"></a>00619         ting::Mutex mutex;
<a name="l00620"></a>00620 
<a name="l00621"></a>00621         <span class="keyword">typedef</span> std::list&lt;ting::Ref&lt;aumiks::Channel&gt; &gt; T_ChannelList;
<a name="l00622"></a>00622         <span class="keyword">typedef</span> T_ChannelList::iterator T_ChannelIter;
<a name="l00623"></a>00623         T_ChannelList chPool;
<a name="l00624"></a>00624 
<a name="l00625"></a>00625         T_ChannelList channelsToAdd;
<a name="l00626"></a>00626 
<a name="l00627"></a>00627         Effect::T_EffectsList effects;<span class="comment">//list of effects applied to final mixing buffer</span>
<a name="l00628"></a>00628 
<a name="l00629"></a>00629         <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> freq, <span class="keywordtype">unsigned</span> chans&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> ApplyEffectsToMixBuf(ting::Buffer&lt;ting::s32&gt;&amp; mixBuf){
<a name="l00630"></a>00630                 <span class="keywordflow">for</span>(Effect::T_EffectsIter i = this-&gt;effects.begin(); i != this-&gt;effects.end(); ++i){
<a name="l00631"></a>00631                         (*i)-&gt;ApplyToBufImpl&lt;freq, chans&gt;(mixBuf, <span class="keyword">false</span>);
<a name="l00632"></a>00632                 }
<a name="l00633"></a>00633         }
<a name="l00634"></a>00634 
<a name="l00635"></a>00635         Effect::T_EffectsList effectsToAdd;
<a name="l00636"></a>00636         Effect::T_EffectsList effectsToRemove;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638         ting::Inited&lt;bool, false&gt; clearEffects;<span class="comment">//flag indicating that removing of all effects requested</span>
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 <span class="keyword">public</span>:
<a name="l00647"></a><a class="code" href="classaumiks_1_1Lib.htm#acffb41b8c366c2322f1befdc26ee32bf">00647</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#acffb41b8c366c2322f1befdc26ee32bf" title="Add global effect.">AddEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;Effect&gt;&amp; effect){
<a name="l00648"></a>00648                 ASSERT(effect.IsValid())
<a name="l00649"></a>00649 
<a name="l00650"></a>00650                 {
<a name="l00651"></a>00651                         ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00652"></a>00652 
<a name="l00653"></a>00653                         this-&gt;effectsToAdd.push_back(effect);
<a name="l00654"></a>00654                 }
<a name="l00655"></a>00655         }
<a name="l00656"></a>00656 
<a name="l00663"></a><a class="code" href="classaumiks_1_1Lib.htm#a872f0e46abe4cdcb031b1b9911842d36">00663</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#a872f0e46abe4cdcb031b1b9911842d36" title="Remove global effect.">RemoveEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;Effect&gt;&amp; effect){
<a name="l00664"></a>00664                 ASSERT(effect.IsValid())
<a name="l00665"></a>00665 
<a name="l00666"></a>00666                 {
<a name="l00667"></a>00667                         ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00668"></a>00668 
<a name="l00669"></a>00669                         this-&gt;effectsToRemove.push_back(effect);
<a name="l00670"></a>00670                 }
<a name="l00671"></a>00671         }
<a name="l00672"></a>00672 
<a name="l00673"></a><a class="code" href="classaumiks_1_1Lib.htm#ae8cdfbd43c3a5e5a7355c81f6a519621">00673</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#ae8cdfbd43c3a5e5a7355c81f6a519621">RemoveAllEffects_ts</a>(){
<a name="l00674"></a>00674                 ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00675"></a>00675 
<a name="l00676"></a>00676                 this-&gt;clearEffects = <span class="keyword">true</span>;
<a name="l00677"></a>00677         }
<a name="l00678"></a>00678 <span class="keyword">private</span>:
<a name="l00679"></a>00679         <span class="keyword">typedef</span> std::pair&lt;ting::Ref&lt;aumiks::Channel&gt;, ting::Ref&lt;aumiks::Effect&gt; &gt; T_ChannelEffectPair;
<a name="l00680"></a>00680         <span class="keyword">typedef</span> std::list&lt;T_ChannelEffectPair&gt; T_ChannelEffectPairsList;
<a name="l00681"></a>00681         <span class="keyword">typedef</span> T_ChannelEffectPairsList::iterator T_ChannelEffectPairsIter;
<a name="l00682"></a>00682         T_ChannelEffectPairsList effectsToAddToChan;
<a name="l00683"></a>00683         T_ChannelEffectPairsList effectsToRemoveFromChan;
<a name="l00684"></a>00684 
<a name="l00685"></a>00685         <span class="comment">//list of channels from which it is requested to remove all effects</span>
<a name="l00686"></a>00686         T_ChannelList effectsToClear;
<a name="l00687"></a>00687 
<a name="l00688"></a>00688         <span class="keyword">const</span> ting::Ptr&lt;MixerBuffer&gt; mixerBuffer;
<a name="l00689"></a>00689 
<a name="l00690"></a>00690         <span class="keyword">static</span> ting::Ptr&lt;MixerBuffer&gt; CreateMixerBuffer(<span class="keywordtype">unsigned</span> bufferSizeMillis, <a class="code" href="namespaceaumiks.htm#a73d8bc01a7156a5f6f191e6c5462b2ab" title="Sound output format.">E_Format</a> format);
<a name="l00691"></a>00691 
<a name="l00692"></a>00692         <span class="comment">//backend must be initialized after all the essential parts of aumiks are initialized,</span>
<a name="l00693"></a>00693         <span class="comment">//because after the backend object is created, it starts calling the FillPlayBuf() method periodically.</span>
<a name="l00694"></a>00694         <span class="keyword">const</span> ting::Ptr&lt;AudioBackend&gt; audioBackend;
<a name="l00695"></a>00695 };
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 
<a name="l00699"></a>00699 <span class="comment">//base class for audio backends</span>
<a name="l00700"></a>00700 <span class="comment">//TODO: make it private somehow</span>
<a name="l00701"></a><a class="code" href="classaumiks_1_1AudioBackend.htm">00701</a> <span class="keyword">class </span><a class="code" href="classaumiks_1_1AudioBackend.htm">AudioBackend</a>{
<a name="l00702"></a>00702 <span class="keyword">protected</span>:
<a name="l00703"></a><a class="code" href="classaumiks_1_1AudioBackend.htm#afac23ae4402fb95be9b41a3ff775931b">00703</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1AudioBackend.htm#afac23ae4402fb95be9b41a3ff775931b">FillPlayBuf</a>(ting::Buffer&lt;ting::u8&gt;&amp; playBuf){
<a name="l00704"></a>00704                 aumiks::Lib::Inst().FillPlayBuf(playBuf);
<a name="l00705"></a>00705         }
<a name="l00706"></a>00706 
<a name="l00707"></a><a class="code" href="classaumiks_1_1AudioBackend.htm#af8db02e27bd6cd24241c2f10709e083d">00707</a>         <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1AudioBackend.htm#af8db02e27bd6cd24241c2f10709e083d">AudioBackend</a>(){}
<a name="l00708"></a>00708         
<a name="l00709"></a>00709 <span class="keyword">public</span>:
<a name="l00710"></a><a class="code" href="classaumiks_1_1AudioBackend.htm#ac5df3fa4079e16a9146b5ad12909d810">00710</a>         <span class="keyword">virtual</span> <a class="code" href="classaumiks_1_1AudioBackend.htm#ac5df3fa4079e16a9146b5ad12909d810">~AudioBackend</a>()throw(){}
<a name="l00711"></a>00711         
<a name="l00712"></a><a class="code" href="classaumiks_1_1AudioBackend.htm#a36767dc0cf3f095fa55955cb189fc97b">00712</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1AudioBackend.htm#a36767dc0cf3f095fa55955cb189fc97b">SetPaused</a>(<span class="keywordtype">bool</span> pause){}
<a name="l00713"></a>00713 };
<a name="l00714"></a>00714 
<a name="l00715"></a>00715 
<a name="l00716"></a>00716 
<a name="l00717"></a><a class="code" href="classaumiks_1_1Lib.htm#ae5ceb6d7c4c0d3a87a5e5eb2b12297a0">00717</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Lib.htm#ae5ceb6d7c4c0d3a87a5e5eb2b12297a0" title="Sets the paused state of the audio engine.">Lib::SetPaused</a>(<span class="keywordtype">bool</span> pause){
<a name="l00718"></a>00718         ASSERT(this-&gt;audioBackend)
<a name="l00719"></a>00719         this-&gt;audioBackend-&gt;SetPaused(pause);
<a name="l00720"></a>00720 }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 
<a name="l00723"></a>00723 
<a name="l00724"></a>00724 <span class="comment">//Full template specializations</span>
<a name="l00725"></a>00725 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;11025, 1&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00726"></a>00726         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf11025Mono16(this-&gt;smpBuf);
<a name="l00727"></a>00727 }
<a name="l00728"></a>00728 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;11025, 2&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00729"></a>00729         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf11025Stereo16(this-&gt;smpBuf);
<a name="l00730"></a>00730 }
<a name="l00731"></a>00731 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;22050, 1&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00732"></a>00732         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf22050Mono16(this-&gt;smpBuf);
<a name="l00733"></a>00733 }
<a name="l00734"></a>00734 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;22050, 2&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00735"></a>00735         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf22050Stereo16(this-&gt;smpBuf);
<a name="l00736"></a>00736 }
<a name="l00737"></a>00737 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;44100, 1&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00738"></a>00738         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf44100Mono16(this-&gt;smpBuf);
<a name="l00739"></a>00739 }
<a name="l00740"></a>00740 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> Lib::MixerBuffer::FillSmpBufImpl&lt;44100, 2&gt;(<span class="keyword">const</span> ting::Ref&lt;aumiks::Channel&gt;&amp; ch){
<a name="l00741"></a>00741         <span class="keywordflow">return</span> ch-&gt;FillSmpBuf44100Stereo16(this-&gt;smpBuf);
<a name="l00742"></a>00742 }
<a name="l00743"></a>00743 
<a name="l00744"></a>00744 
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 <span class="comment">//Full template specializations</span>
<a name="l00747"></a>00747 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;11025, 1&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00748"></a>00748         <span class="keywordflow">return</span> this-&gt;ApplyToBuf11025Mono16(buf, soundStopped);
<a name="l00749"></a>00749 }
<a name="l00750"></a>00750 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;11025, 2&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00751"></a>00751         <span class="keywordflow">return</span> this-&gt;ApplyToBuf11025Stereo16(buf, soundStopped);
<a name="l00752"></a>00752 }
<a name="l00753"></a>00753 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;22050, 1&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00754"></a>00754         <span class="keywordflow">return</span> this-&gt;ApplyToBuf22050Mono16(buf, soundStopped);
<a name="l00755"></a>00755 }
<a name="l00756"></a>00756 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;22050, 2&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00757"></a>00757         <span class="keywordflow">return</span> this-&gt;ApplyToBuf22050Stereo16(buf, soundStopped);
<a name="l00758"></a>00758 }
<a name="l00759"></a>00759 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;44100, 1&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00760"></a>00760         <span class="keywordflow">return</span> this-&gt;ApplyToBuf44100Mono16(buf, soundStopped);
<a name="l00761"></a>00761 }
<a name="l00762"></a>00762 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <a class="code" href="classaumiks_1_1Effect.htm#ae2ab5ff25b446b49bbe3cb3ee1707f54" title="A result which should be returned by effect application method.">Effect::E_Result</a> Effect::ApplyToBufImpl&lt;44100, 2&gt;(ting::Buffer&lt;ting::s32&gt;&amp; buf, <span class="keywordtype">bool</span> soundStopped){
<a name="l00763"></a>00763         <span class="keywordflow">return</span> this-&gt;ApplyToBuf44100Stereo16(buf, soundStopped);
<a name="l00764"></a>00764 }
<a name="l00765"></a>00765 
<a name="l00766"></a>00766 
<a name="l00767"></a>00767 
<a name="l00773"></a><a class="code" href="classaumiks_1_1Sound.htm">00773</a> <span class="keyword">class </span><a class="code" href="classaumiks_1_1Sound.htm" title="Base class for sounds.">Sound</a> : <span class="keyword">public</span> ting::RefCounted{
<a name="l00774"></a>00774 <span class="keyword">protected</span>:
<a name="l00775"></a><a class="code" href="classaumiks_1_1Sound.htm#ae0a648c73aa02e9c3375b9d733f06ee8">00775</a>         <a class="code" href="classaumiks_1_1Sound.htm#ae0a648c73aa02e9c3375b9d733f06ee8">Sound</a>(){}
<a name="l00776"></a>00776 <span class="keyword">public</span>:
<a name="l00777"></a>00777 
<a name="l00783"></a>00783         <span class="keyword">virtual</span> ting::Ref&lt;aumiks::Channel&gt; CreateChannel()<span class="keyword">const</span> = 0;
<a name="l00784"></a>00784 };
<a name="l00785"></a>00785 
<a name="l00786"></a>00786 
<a name="l00787"></a>00787 
<a name="l00788"></a><a class="code" href="classaumiks_1_1Channel.htm#ab051f183bd26e1a07bc45368ae7ecdb4">00788</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#ab051f183bd26e1a07bc45368ae7ecdb4" title="Start playing of this channel.">Channel::Play</a>(){
<a name="l00789"></a>00789         aumiks::Lib::Inst().PlayChannel_ts(ting::Ref&lt;aumiks::Channel&gt;(<span class="keyword">this</span>));
<a name="l00790"></a>00790 }
<a name="l00791"></a>00791 
<a name="l00792"></a>00792 
<a name="l00793"></a>00793 
<a name="l00794"></a><a class="code" href="classaumiks_1_1Channel.htm#ae202cf9f2e1e2157db50612545b91d7a">00794</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#ae202cf9f2e1e2157db50612545b91d7a" title="Add effect to the channel.">Channel::AddEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; effect){
<a name="l00795"></a>00795         aumiks::Lib::Inst().AddEffectToChannel_ts(
<a name="l00796"></a>00796                         ting::Ref&lt;Channel&gt;(<span class="keyword">this</span>),
<a name="l00797"></a>00797                         effect
<a name="l00798"></a>00798                 );
<a name="l00799"></a>00799 }
<a name="l00800"></a>00800 
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 
<a name="l00803"></a><a class="code" href="classaumiks_1_1Channel.htm#a1e5e0ee40d5db6c2d4b07fe66905bffa">00803</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#a1e5e0ee40d5db6c2d4b07fe66905bffa" title="Remove effect from the channel.">Channel::RemoveEffect_ts</a>(<span class="keyword">const</span> ting::Ref&lt;aumiks::Effect&gt;&amp; effect){
<a name="l00804"></a>00804         aumiks::Lib::Inst().RemoveEffectFromChannel_ts(
<a name="l00805"></a>00805                         ting::Ref&lt;Channel&gt;(<span class="keyword">this</span>),
<a name="l00806"></a>00806                         effect
<a name="l00807"></a>00807                 );
<a name="l00808"></a>00808 }
<a name="l00809"></a>00809 
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 
<a name="l00812"></a><a class="code" href="classaumiks_1_1Channel.htm#adba4dbeabf95d10847de654930b2dd52">00812</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classaumiks_1_1Channel.htm#adba4dbeabf95d10847de654930b2dd52" title="Remove all effects from channel.">Channel::RemoveAllEffects_ts</a>(){
<a name="l00813"></a>00813         aumiks::Lib::Inst().RemoveAllEffectsFromChannel_ts(
<a name="l00814"></a>00814                         ting::Ref&lt;Channel&gt;(<span class="keyword">this</span>)
<a name="l00815"></a>00815                 );
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 
<a name="l00820"></a>00820 } <span class="comment">//~namespace</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="aumiks_8hpp.htm">aumiks.hpp</a>      </li>
      <li class="footer">Generated on Tue Mar 13 2012 14:32:08 for libaumiks by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.4 </li>
    </ul>
  </div>

</body>
</html>
